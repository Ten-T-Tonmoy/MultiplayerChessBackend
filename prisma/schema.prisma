// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//3 steps ... change schema >>>  then
//npx prisma migrate dev --name init
//use PrismaClient as prsima
//prisma.user.findMany() /seller.findOne()
// npx prisma studio => loadl Ui to browse DB

//demo DATABASE_URL="postgresql://postgres:<password here>@localhost:5432/<Database Name here>?schema=public"

//relations one2many and many2one same shit its  BookList        BookList? @relation(fields: [bookListId], references: [id])
// many to many just add likedBy         User[]    @relation("likedBooks") on both table
generator client {
  provider = "prisma-client-js" //remove shitty 2nd line of this and import from @prisma/client
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//@@unique([filed1,filed2]) composite unique
//@@index composite index  add things u wanna search by

/**
 * ---------------------------------Definitive Schema and relations-------------------------------------------------------------
 * enum BookType {
 * poetry
 * drama
 * fiction
 * }
 * model Book {
 * id              String    @id @default(cuid())
 * bookType        BookType //poetry drama academic bla bla shit
 * publishDate     DateTime?
 * availableStores String[]
 * //Review[]  reviews         String[]
 * ratingSum       Int       @default(0)
 * likedBy         User[]    @relation("likedBooks")
 * createdAt       DateTime  @default(now())
 * review          Review[]
 * BookList        BookList? @relation(fields: [bookListId], references: [id])
 * bookListId      String?
 * @@index([genre])
 * @@index([keywords])
 * }
 */

enum AvatarType {
  teenboy
  casualMan
  suitedMan
  ladyHat
  suitedLady
  gownLady
  mysterious
  schoolBoy
  schoolGirl
}

model User {
  id         String      @id @default(cuid())
  name       String
  username   String
  password   String
  avatar     AvatarType?
  about      String?
  isOnline   Boolean     @default(false)
  lastActive DateTime    @default(now())
  createdAt  DateTime    @default(now()) // always createdAt to track self reminder

  email        String?
  country      String?
  gender       Boolean //definately binary
  profilePhoto String?
  coverPhoto   String?

  blitzRating     Int @default(1000)
  rapidRating     Int @default(1000)
  classicalRating Int @default(1000)
  bulletRating    Int @default(1000) //might avoid this

  //history
  totalGames    Int @default(0)
  wins          Int @default(0)
  loses         Int @default(0)
  draws         Int @default(0)
  currentStreak Int @default(0)
  bestStreak    Int @default(0)

  //relations
  whiteGames Game[] @relation("whitePlayer") //one to many
  BlackGames Game[] @relation("blackPlayer") //one to many

  pastGames GameHistory[]

  /**
   * puzzlesSolved   PuzzleSolved[]
   * puzzlesCreated  Puzzle[]      @relation("PuzzleCreator")
   * achievements    UserAchievement[]
   * sentFriendRequests     Friendship[] @relation("FriendRequester")
   * receivedFriendRequests Friendship[] @relation("FriendReceiver")
   */
}

model Setting {
  id String @id @default(cuid())

  //prefs
  maxOpponentRating           Int     @default(2000)
  minOpponentRating           Int     @default(500)
  onlineStatusPubliclyVisible Boolean @default(true)
  allowSpectators             Boolean @default(true)
  acceptPublicFriendRequests  Boolean @default(true)

  //ui  gotta make enums for these?
  theme        String  @default("classic")
  boardColor   String  @default("brown")
  pieceColor   String  @default("standard")
  language     String  @default("endglish") //as if i can change
  soundEnabled Boolean @default(true)
  // animationsPlay Boolean @default(true)

  //privacy stuffs
  profilePublic     Boolean @default(true)
  gameHistoryPublic Boolean @default(true)
  statusPublic      Boolean @default(true)

  updatedAt DateTime @updatedAt //just trackin changes

  @@map("settings")
}

enum GameModeType {
  BLITZ
  BULLET
  RAPID
  CLASSICAL
  CUSTOM
}

enum GameStatusType {
  WAITING
  IN_PROGRESS
  FINISHED
  ABANDONED
}

enum ResultType {
  WHITE_WINS
  BLACK_WINS
  DRAW
  ABANDONED
}

enum FriendshipStatusType {
  REQUEST_PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

model Game {
  id     String @id @default(cuid())
  roomId String @unique

  whiteId String
  white   User   @relation("whitePlayer", fields: [whiteId], references: [id])
  blackId String
  black   User   @relation("blackPlayer", fields: [blackId], references: [id])

  timeControlView String
  isRatedGame     Boolean        @default(true)
  isPublicGame    Boolean        @default(true)
  gamestatus      GameStatusType @default(WAITING)
  result          ResultType?
  winnerId        String? // gotta send from frontend?

  //realtime play tracking

  currentBoard String @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR")
  moves        Json   @default("[]") //string array wont work
  moveCount    Int    @default(0)

  whiteTimeRemaining Int //in secs
  blackTimeRemaining Int //in secs
  incrementTime      Int @default(0) //extraa

  //timeRelatedHistory
  startedAt DateTime?
  endedAt   DateTime?
  createdAt DateTime  @default(now())

  //viewers 
  currentSepctatorsCount Int @default(0)
  peakSepctatorsCount    Int @default(0)

  //for live messages
  liveChatLog LiveChatMessages[]
  GameHistory GameHistory[]

  @@map("games")
}

model LiveChatMessages {
  id String @id @default(cuid())

  username    String
  message     String
  timestamp   DateTime @default(now())
  GameRelated Game?    @relation(fields: [gameId], references: [id])
  gameId      String?

  @@map("livechats")
}

model GameHistory {
  id          String @id @default(cuid())
  gameId      String
  gameRelated Game   @relation(fields: [gameId], references: [id])

  player                 User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String?
  //ingame info
  opponent               String //id?
  result                 ResultType
  playedAs               String //black or white
  gameMode               GameModeType
  timeControl            String
  //performance
  userRatingPreMatch     Int
  userRatingPostMatch    Int
  opponentRatingPreMatch Int
  //bruh why need rating change

  //game analyistics
  moves    Json //move history!
  accuracy Float? //move accurarcy

  blunders   Int @default(0) //losing big piece
  mistake    Int @default(0) //tight situation or forgeting to eat?
  inaccuracy Int @default(0) //jani na

  //POTG 
  playOfTheGame Json @default("[]")

  @@map("gamehistory")
}

//future modular cases
